/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bittle.beansmod;

import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.netbeans.api.options.OptionsDisplayer;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.cookies.OpenCookie;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.loaders.DataObject;
import org.openide.loaders.DataObjectNotFoundException;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.bittle.beansmod//BittleTree//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "BittleTree",
        iconBase = "org/bittle/beansmod/BittleLogo16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "org.bittle.beansmod.BittleTreeTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_BittleTreeAction",
        preferredID = "BittleTree"
)
@Messages({
    "CTL_BittleTreeAction=BittleFiles",
    "CTL_BittleTreeTopComponent=Bittle Files",
    "HINT_BittleTreeTopComponent=This is your current Bittle directory"
})
public final class BittleTreeTopComponent extends TopComponent {
    
    private Boolean loggedIn;
    private final TreePopup treePopup;
    private final SyncList syncList;

    public BittleTreeTopComponent() {
        syncList = SyncList.getInstance();
        initComponents();
        treePopup = new TreePopup(fileTree, treeModel);
        setName(Bundle.CTL_BittleTreeTopComponent());
        setToolTipText(Bundle.HINT_BittleTreeTopComponent());   
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LoggedInScreen = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileTree = new javax.swing.JTree();
        NotLoggedInScreen = new javax.swing.JPanel();
        FlipGuy = new javax.swing.JLabel();
        NotLoggedInMessage = new javax.swing.JLabel();
        ToOptionsButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(addButton, org.openide.util.NbBundle.getMessage(BittleTreeTopComponent.class, "BittleTreeTopComponent.addButton.text")); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        rootNode = new DefaultMutableTreeNode("Bittle Files");
        treeModel = new DefaultTreeModel(rootNode);
        fileTree = new JTree(treeModel);
        fileTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        fileTree.setShowsRootHandles(true);
        fileTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileTreeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(fileTree);

        javax.swing.GroupLayout LoggedInScreenLayout = new javax.swing.GroupLayout(LoggedInScreen);
        LoggedInScreen.setLayout(LoggedInScreenLayout);
        LoggedInScreenLayout.setHorizontalGroup(
            LoggedInScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoggedInScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LoggedInScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LoggedInScreenLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE))
                .addContainerGap())
        );
        LoggedInScreenLayout.setVerticalGroup(
            LoggedInScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoggedInScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        FlipGuy.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(FlipGuy, org.openide.util.NbBundle.getMessage(BittleTreeTopComponent.class, "BittleTreeTopComponent.FlipGuy.text")); // NOI18N

        NotLoggedInMessage.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(NotLoggedInMessage, org.openide.util.NbBundle.getMessage(BittleTreeTopComponent.class, "BittleTreeTopComponent.NotLoggedInMessage.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ToOptionsButton, org.openide.util.NbBundle.getMessage(BittleTreeTopComponent.class, "BittleTreeTopComponent.ToOptionsButton.text")); // NOI18N
        ToOptionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToOptionsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout NotLoggedInScreenLayout = new javax.swing.GroupLayout(NotLoggedInScreen);
        NotLoggedInScreen.setLayout(NotLoggedInScreenLayout);
        NotLoggedInScreenLayout.setHorizontalGroup(
            NotLoggedInScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NotLoggedInScreenLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(FlipGuy)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NotLoggedInScreenLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(NotLoggedInMessage)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(NotLoggedInScreenLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ToOptionsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        NotLoggedInScreenLayout.setVerticalGroup(
            NotLoggedInScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NotLoggedInScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FlipGuy)
                .addGap(18, 18, 18)
                .addComponent(NotLoggedInMessage)
                .addGap(18, 18, 18)
                .addComponent(ToOptionsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LoggedInScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(38, 38, 38)
                    .addComponent(NotLoggedInScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(38, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LoggedInScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(138, 138, 138)
                    .addComponent(NotLoggedInScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(138, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int choice = fileChooser.showOpenDialog(null);

        if(choice == JFileChooser.APPROVE_OPTION){
            String filePath = fileChooser.getSelectedFile().toString();
            try {
                SyncList.addNewFile(filePath);
            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void fileTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileTreeMouseClicked
        int row = fileTree.getClosestRowForLocation(evt.getX(), evt.getY());
        fileTree.setSelectionRow(row);
        
        // If the user right clicked
        if (SwingUtilities.isRightMouseButton(evt))
            treePopup.show(evt.getComponent(), evt.getX(), evt.getY());
        
        // If the user double clicked
        else if(evt.getClickCount() == 2){
            TreePath selection = fileTree.getSelectionPath();
            if(selection != null){
                DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)selection.getLastPathComponent();
                if(!selectedNode.getUserObject().equals("Bittle Files")){
                    FileObject fo = FileUtil.toFileObject(FileUtil.normalizeFile(new File(SyncList.getBittleFilePath((String)selectedNode.getUserObject()))));
                    try {
                        DataObject.find(fo).getLookup().lookup(OpenCookie.class).open();
                    } catch (DataObjectNotFoundException ex) {
                    }
                }
            }
        }
    }//GEN-LAST:event_fileTreeMouseClicked

    private void ToOptionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToOptionsButtonActionPerformed
        OptionsDisplayer.getDefault().open("BittleOptions");
    }//GEN-LAST:event_ToOptionsButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FlipGuy;
    private javax.swing.JPanel LoggedInScreen;
    private javax.swing.JLabel NotLoggedInMessage;
    private javax.swing.JPanel NotLoggedInScreen;
    private javax.swing.JButton ToOptionsButton;
    private javax.swing.JButton addButton;
    private javax.swing.JTree fileTree;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    private DefaultMutableTreeNode rootNode;
    private DefaultTreeModel treeModel;
    
    @Override
    public void componentOpened() {
        updateTree();
    }
    
    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    /**
     * Updates Log In State and Bittle Directory Path
     * - If the user is logged in:
     *    * Shows the contents of the bittle folder 
     * - Otherwise, displays the not logged in screen
     */
    public void updateTree(){
        loggedIn = NbPreferences.forModule(BittlePanel.class).getBoolean("status", false);
        
        if(loggedIn){
            SyncList.scanFolder();
            treeModel.reload();
            LoggedInScreen.setVisible(true);
            NotLoggedInScreen.setVisible(false);
        }
        else{
            NotLoggedInScreen.setVisible(true);
            LoggedInScreen.setVisible(false);
        }
    }
   private void clearFiles(){
       rootNode.removeAllChildren();
       treeModel.reload();
       // TODO: Remove everything from everywhere
   }
   
   public DefaultMutableTreeNode addObject(Object child){
       return addObject(rootNode, child, true);
   }
   
   private DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent, Object child, boolean visible){
       DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(child);
       
       treeModel.insertNodeInto(childNode, parent, parent.getChildCount());
       
       if(visible)
           fileTree.scrollPathToVisible(new TreePath(childNode.getPath()));
       
       return childNode;
   }
}
