package org.bittle.beansmod;

import org.bittle.utilities.TreePopup;
import org.bittle.utilities.Share;
import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.netbeans.api.options.OptionsDisplayer;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.cookies.OpenCookie;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.loaders.DataObject;
import org.openide.loaders.DataObjectNotFoundException;
import org.openide.windows.TopComponent;
import org.openide.util.NbPreferences;
import org.openide.windows.Mode;
import org.openide.windows.WindowManager;

@TopComponent.Description(
        preferredID = "BittleTree",
        iconBase = "org/bittle/beansmod/BittleLogo16.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "org.bittle.beansmod.BittleTreeTopComponent")
@ActionReferences({
    @ActionReference(path = "Menu/Window"),
    @ActionReference(path = "Shortcuts", name = "D-B")
})
@TopComponent.OpenActionRegistration(
        displayName = "BittleFiles",
        preferredID = "BittleTree"
)
public final class BittleTreeTopComponent extends TopComponent {
    
    private final Preferences preferences;
    private final TreePopup treePopup;
    private boolean loggedIn = false;

    public BittleTreeTopComponent() {
        // Set up the GUI window 
        setName("Bittle Files");
        setToolTipText("These are the files being synced by Bittle");
        initComponents();
        
        // Add the pop up menu to the tree
        treePopup = new TreePopup(fileTree, treeModel);
        
        // Get the preferences of the options
        preferences = NbPreferences.forModule(BittlePanel.class);
    }
    
    /**
     * Override the open method to force opening in explorer view 
     */
    @Override
    public void open() {
        Mode m = WindowManager.getDefault().findMode ("explorer");
        if (m != null) {
            m.dockInto(this);
        }
        super.open();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LoggedInScreen = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileTree = new javax.swing.JTree();
        RemoveAllButton = new javax.swing.JButton();
        OptionsButton = new javax.swing.JButton();
        NotLoggedInScreen = new javax.swing.JPanel();
        FlipGuy = new javax.swing.JLabel();
        NotLoggedInMessage = new javax.swing.JLabel();
        ToOptionsButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(addButton, org.openide.util.NbBundle.getMessage(BittleTreeTopComponent.class, "BittleTreeTopComponent.addButton.text")); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        rootNode = new DefaultMutableTreeNode("Bittle Files");
        treeModel = new DefaultTreeModel(rootNode);
        fileTree = new JTree(treeModel);
        fileTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        fileTree.setShowsRootHandles(true);
        fileTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileTreeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(fileTree);

        org.openide.awt.Mnemonics.setLocalizedText(RemoveAllButton, org.openide.util.NbBundle.getMessage(BittleTreeTopComponent.class, "BittleTreeTopComponent.RemoveAllButton.text")); // NOI18N
        RemoveAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveAllButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(OptionsButton, org.openide.util.NbBundle.getMessage(BittleTreeTopComponent.class, "BittleTreeTopComponent.OptionsButton.text")); // NOI18N
        OptionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptionsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LoggedInScreenLayout = new javax.swing.GroupLayout(LoggedInScreen);
        LoggedInScreen.setLayout(LoggedInScreenLayout);
        LoggedInScreenLayout.setHorizontalGroup(
            LoggedInScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoggedInScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LoggedInScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(LoggedInScreenLayout.createSequentialGroup()
                        .addComponent(addButton)
                        .addGap(18, 18, 18)
                        .addComponent(RemoveAllButton)
                        .addGap(18, 18, 18)
                        .addComponent(OptionsButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        LoggedInScreenLayout.setVerticalGroup(
            LoggedInScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoggedInScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(LoggedInScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(RemoveAllButton)
                    .addComponent(OptionsButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        FlipGuy.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(FlipGuy, org.openide.util.NbBundle.getMessage(BittleTreeTopComponent.class, "BittleTreeTopComponent.FlipGuy.text")); // NOI18N

        NotLoggedInMessage.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(NotLoggedInMessage, org.openide.util.NbBundle.getMessage(BittleTreeTopComponent.class, "BittleTreeTopComponent.NotLoggedInMessage.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ToOptionsButton, org.openide.util.NbBundle.getMessage(BittleTreeTopComponent.class, "BittleTreeTopComponent.ToOptionsButton.text")); // NOI18N
        ToOptionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToOptionsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout NotLoggedInScreenLayout = new javax.swing.GroupLayout(NotLoggedInScreen);
        NotLoggedInScreen.setLayout(NotLoggedInScreenLayout);
        NotLoggedInScreenLayout.setHorizontalGroup(
            NotLoggedInScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NotLoggedInScreenLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(NotLoggedInScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FlipGuy)
                    .addComponent(NotLoggedInMessage))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(NotLoggedInScreenLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ToOptionsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        NotLoggedInScreenLayout.setVerticalGroup(
            NotLoggedInScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NotLoggedInScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FlipGuy)
                .addGap(18, 18, 18)
                .addComponent(NotLoggedInMessage)
                .addGap(18, 18, 18)
                .addComponent(ToOptionsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LoggedInScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(38, 38, 38)
                    .addComponent(NotLoggedInScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(38, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LoggedInScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(138, 138, 138)
                    .addComponent(NotLoggedInScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(138, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        
        // Set up a file chooser for files 
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        // Show the file chooser 
        int choice = fileChooser.showOpenDialog(null);

        // If the user chose something 
        if(choice == JFileChooser.APPROVE_OPTION){
            
            // Get the path of thier choice and attempt to add it to the share 
            String filePath = fileChooser.getSelectedFile().toString();
            try {
                Share.getInstance().addFile(filePath);
            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void fileTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileTreeMouseClicked
        
        // Get the selected row
        int row = fileTree.getClosestRowForLocation(evt.getX(), evt.getY());
        fileTree.setSelectionRow(row);
        TreePath selection = fileTree.getSelectionPath();
        if(selection != null){
            
            // Get the selected node
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)selection.getLastPathComponent();
            
            // If it is not the root node
            if(!selectedNode.getUserObject().equals("Bittle Files")){
                
                // If the user right clicked, show the pop up menu
                if (SwingUtilities.isRightMouseButton(evt))
                    treePopup.show(evt.getComponent(), evt.getX(), evt.getY());
                
                // If the user double clicked, Get the file object from the selected node and open it
                else if (evt.getClickCount() == 2){
                    FileObject fo = FileUtil.toFileObject(FileUtil.normalizeFile(new File(Share.getInstance().getBittleFilePath((String)selectedNode.getUserObject()))));
                    try {
                        DataObject.find(fo).getLookup().lookup(OpenCookie.class).open();
                    } catch (DataObjectNotFoundException ex) {
                    }
                }
            }
        }
    }//GEN-LAST:event_fileTreeMouseClicked

    private void ToOptionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToOptionsButtonActionPerformed
        OptionsDisplayer.getDefault().open("BittleOptions");
    }//GEN-LAST:event_ToOptionsButtonActionPerformed

    private void RemoveAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveAllButtonActionPerformed
        
        // Confirm the user wants to wipe out all the files 
        NotifyDescriptor d = new NotifyDescriptor.Confirmation("This will completely remove all the files being synced from your computer!", 
                                                               "Are you sure?",
                                                               NotifyDescriptor.OK_CANCEL_OPTION);
        
        // If the user confirmed
        if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.OK_OPTION) {
            // Make sure there are files in the share
            if(Share.getInstance().files.isEmpty()){
                NotifyDescriptor nd = new NotifyDescriptor.Message("Nothing to Remove...", NotifyDescriptor.WARNING_MESSAGE);
                DialogDisplayer.getDefault().notify(nd);
            }
            // If there are, clear everything out 
            else
                try {
                    clearFiles();
                } catch (IOException ex) {
                }
        }

    }//GEN-LAST:event_RemoveAllButtonActionPerformed

    private void OptionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptionsButtonActionPerformed
        OptionsDisplayer.getDefault().open("BittleOptions");
    }//GEN-LAST:event_OptionsButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FlipGuy;
    private javax.swing.JPanel LoggedInScreen;
    private javax.swing.JLabel NotLoggedInMessage;
    private javax.swing.JPanel NotLoggedInScreen;
    private javax.swing.JButton OptionsButton;
    private javax.swing.JButton RemoveAllButton;
    private javax.swing.JButton ToOptionsButton;
    private javax.swing.JButton addButton;
    private javax.swing.JTree fileTree;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    private DefaultMutableTreeNode rootNode;
    private DefaultTreeModel treeModel;
    
    @Override
    public void componentOpened() {
        updateTree();
    }
    
    @Override
    public void componentClosed() {
        // N/A
    }

    /**
     * Updates Log In State and Bittle Directory Path
     * - If the user is logged in:
     *    * Shows the contents of the bittle folder 
     * - Otherwise, displays the not logged in screen
     */
    public void updateTree(){
        loggedIn = preferences.getBoolean("status", loggedIn);
        if(loggedIn){
            Share.getInstance().scanFolder();
            treeModel.reload();
            LoggedInScreen.setVisible(true);
            NotLoggedInScreen.setVisible(false);
        }
        else{
            NotLoggedInScreen.setVisible(true);
            LoggedInScreen.setVisible(false);
            NotLoggedInScreen.requestFocusInWindow();
            ToOptionsButton.requestFocusInWindow();
        }
    }
 
    /**
     * Removes all children from tree root
     * Clears all files from share session 
     * Reloads the tree
     */
    public void clearFiles() throws IOException{
        Share.getInstance().purgeFiles();
        treeModel.reload();
    }
    
    /**
     * @return The tree model of the file tree
     */
    public DefaultTreeModel getModel(){
        return treeModel;
    }
    
    /**
     * Adds an object to the root node of the tree
     * @param child The object to be added to the tree
     * @return The node that was added
    */
    public DefaultMutableTreeNode addObject(Object child){
        return addObject(rootNode, child);
    }
    
    /**
     * Removes a node from the tree with the given filename
     * @param filename The name of the node to be removed 
     */
    public void removeNode(String filename){
        
        DefaultMutableTreeNode foundNode = searchNode(filename);
        
        if(foundNode != null)
            treeModel.removeNodeFromParent(foundNode);
    }
    
    /**
     * Adds a new child to a node in the tree
     * @param parent The node the new node should be added to 
     * @param child The object to be added to the tree
     * @return  The node that was added
    */
    private DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent, Object child){
        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(child);
        
        treeModel.insertNodeInto(childNode, parent, parent.getChildCount());
        
        fileTree.scrollPathToVisible(new TreePath(childNode.getPath()));
        
        return childNode;
    }
    
    /**
     * Searches for a node in the file tree with the given filename 
     * @param filename The name of the desired node
     * @return The node with the given filename, or null if it doesn't exist 
     */
    private DefaultMutableTreeNode searchNode(String filename){
        DefaultMutableTreeNode foundNode = null;
         
        Enumeration e = rootNode.breadthFirstEnumeration();
        
        while(e.hasMoreElements()){
            foundNode = (DefaultMutableTreeNode) e.nextElement();
            if(filename.equals(foundNode.getUserObject().toString()))
                break;
        }
        
        return foundNode;
    }
}