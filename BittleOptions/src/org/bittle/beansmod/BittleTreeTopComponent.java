/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.bittle.beansmod;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.prefs.Preferences;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;
import javax.swing.JTree;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.bittle.beansmod//BittleTree//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "BittleTreeTopComponent",
        iconBase = "org/bittle/beansmod/BittleLogo16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "org.bittle.beansmod.BittleTreeTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_BittleTreeAction",
        preferredID = "BittleTreeTopComponent"
)
@Messages({
    "CTL_BittleTreeAction=BittleFiles",
    "CTL_BittleTreeTopComponent=Bittle Files",
    "HINT_BittleTreeTopComponent=This is your current Bittle directory"
})
public final class BittleTreeTopComponent extends TopComponent implements PropertyChangeListener{
    
    private String rootpath = System.getProperty("user.home");
    private String optionsRoot = null;
    private Boolean loggedIn;

    public BittleTreeTopComponent() {
        
        optionsRoot = NbPreferences.forModule(BittlePanel.class).get("rootpath", "");
        loggedIn = NbPreferences.forModule(BittlePanel.class).getBoolean("status", false);
        
        if (!optionsRoot.equals(""))
            rootpath = optionsRoot;
        
        initComponents();
        setName(Bundle.CTL_BittleTreeTopComponent());
        setToolTipText(Bundle.HINT_BittleTreeTopComponent());
        NotLoggedInScreen.setVisible(true);
        LoggedInScreen.setVisible(false);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TreeLayeredPane = new javax.swing.JLayeredPane();
        NotLoggedInScreen = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        LoggedInScreen = new javax.swing.JScrollPane();
        fileTree = new javax.swing.JTree();

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(BittleTreeTopComponent.class, "BittleTreeTopComponent.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(BittleTreeTopComponent.class, "BittleTreeTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(BittleTreeTopComponent.class, "BittleTreeTopComponent.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout NotLoggedInScreenLayout = new javax.swing.GroupLayout(NotLoggedInScreen);
        NotLoggedInScreen.setLayout(NotLoggedInScreenLayout);
        NotLoggedInScreenLayout.setHorizontalGroup(
            NotLoggedInScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NotLoggedInScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NotLoggedInScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        NotLoggedInScreenLayout.setVerticalGroup(
            NotLoggedInScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NotLoggedInScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addContainerGap(233, Short.MAX_VALUE))
        );

        fileTree.setModel(new FileTreeModel(new File(rootpath)));
        LoggedInScreen.setViewportView(fileTree);

        TreeLayeredPane.setLayer(NotLoggedInScreen, javax.swing.JLayeredPane.DEFAULT_LAYER);
        TreeLayeredPane.setLayer(LoggedInScreen, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout TreeLayeredPaneLayout = new javax.swing.GroupLayout(TreeLayeredPane);
        TreeLayeredPane.setLayout(TreeLayeredPaneLayout);
        TreeLayeredPaneLayout.setHorizontalGroup(
            TreeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(NotLoggedInScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(TreeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(LoggedInScreen, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE))
        );
        TreeLayeredPaneLayout.setVerticalGroup(
            TreeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(NotLoggedInScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(TreeLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(LoggedInScreen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TreeLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TreeLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane LoggedInScreen;
    private javax.swing.JPanel NotLoggedInScreen;
    private javax.swing.JLayeredPane TreeLayeredPane;
    private javax.swing.JTree fileTree;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
   
    @Override
    public void componentOpened() {
        loggedIn = NbPreferences.forModule(BittlePanel.class).getBoolean("status", false);
        
        if(loggedIn){
            optionsRoot = NbPreferences.forModule(BittlePanel.class).get("rootpath", "");
            if (!optionsRoot.equals(""))
                rootpath = optionsRoot;
            fileTree = null;
            fileTree = new JTree(new FileTreeModel(new File(rootpath)));
            LoggedInScreen.setViewportView(fileTree);
            LoggedInScreen.setVisible(true);
            NotLoggedInScreen.setVisible(false);
        }
        else{
            LoggedInScreen.setVisible(false);
            NotLoggedInScreen.setVisible(true);
        }
    }
    
    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    /*
   class TreePopup extends JPopupMenu {
       public TreePopup(JTree tree) {
           JMenuItem itemDelete = new JMenuItem("Delete");
           JMenuItem itemAdd = new JMenuItem("Add");
           itemDelete.addActionListener(new ActionListener() {
               @Override
               public void actionPerformed(ActionEvent e) {
                   System.out.println("Delete child");
               }
           });
           itemAdd.addActionListener(new ActionListener() {
               public void actionPerformed(ActionEvent ae) {
                   System.out.println("Add child");
               }
           });
  
           add(itemDelete);
           add(new JSeparator());
           add(itemAdd);
       }
   }*/

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        String change = evt.getPropertyName();
        if(change.equals("root")){
            componentOpened();
        }
    }
}
